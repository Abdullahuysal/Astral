// <auto-generated />
using System;
using Astral.PaymentIntegration.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Astral.PaymentIntegration.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Astral.PaymentIntegration.Domain.Payments.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createTime");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("ExternalCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("externalCode");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("isConfirmed");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid")
                        .HasColumnName("memberId");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updateTime");

                    b.HasKey("Id")
                        .HasName("pK_payments");

                    b.HasIndex("ExternalCode")
                        .IsUnique()
                        .HasDatabaseName("iX_payments_externalCode");

                    b.ToTable("payments", "sales");
                });

            modelBuilder.Entity("Astral.PaymentIntegration.Domain.Payments.PaymentItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createTime");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("paymentId");

                    b.Property<Guid?>("PaymentId1")
                        .HasColumnType("uuid")
                        .HasColumnName("paymentId1");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updateTime");

                    b.HasKey("Id")
                        .HasName("pK_paymentitems");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("iX_paymentitems_paymentId");

                    b.HasIndex("PaymentId1")
                        .HasDatabaseName("iX_paymentitems_paymentId1");

                    b.ToTable("paymentitems", "sales");
                });

            modelBuilder.Entity("Astral.PaymentIntegration.Domain.Payments.Payment", b =>
                {
                    b.OwnsOne("Astral.PaymentIntegration.Domain.Shared.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("PaymentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_Currency");

                            b1.HasKey("PaymentId");

                            b1.ToTable("payments", "sales");

                            b1.WithOwner()
                                .HasForeignKey("PaymentId")
                                .HasConstraintName("fK_payments_payments_id");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Astral.PaymentIntegration.Domain.Payments.PaymentItem", b =>
                {
                    b.HasOne("Astral.PaymentIntegration.Domain.Payments.Payment", null)
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fK_paymentitems_payments_paymentId");

                    b.HasOne("Astral.PaymentIntegration.Domain.Payments.Payment", null)
                        .WithMany("PaymentItems")
                        .HasForeignKey("PaymentId1")
                        .HasConstraintName("fK_paymentitems_payments_paymentId1");

                    b.OwnsOne("Astral.PaymentIntegration.Domain.Shared.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("PaymentItemId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("price_Amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("price_Currency");

                            b1.HasKey("PaymentItemId");

                            b1.ToTable("paymentitems", "sales");

                            b1.WithOwner()
                                .HasForeignKey("PaymentItemId")
                                .HasConstraintName("fK_paymentitems_paymentitems_id");
                        });

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("Astral.PaymentIntegration.Domain.Payments.Payment", b =>
                {
                    b.Navigation("PaymentItems");
                });
#pragma warning restore 612, 618
        }
    }
}
